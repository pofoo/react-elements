// dependencies
@use 'sass:map';
// constants
@use '../../constants/colors' as *;
// utils
@use '../../utils/colors' as *;

/*--------------------------------------------------------------
# Variables
--------------------------------------------------------------*/
$text-input--border-radius:                     7px;
$text-input--margin-bottom:                     0.25rem;
$text-input--transition-time:                   0.24s;
$text-input-valid-icon--transition-time:        0.15s;
$text-input--valid-animation-delay:             $text-input--transition-time * 0.7;

/*--------------------------------------------------------------
# Styling
--------------------------------------------------------------*/
.text-input-wrapper {
    display: flex;
    flex-direction: column;
    position: relative;
    margin-bottom: 1.2rem;

    .text-input-label {
        display: flex;
        justify-content: space-between;
        margin-bottom: $text-input--margin-bottom;
        z-index: 2;
        font-size: 85%;

        .text {
            padding: 0 0.3rem;
            background: white;

            transition: transform $text-input--transition-time ease;
        }

        .valid-icon {
            margin-right: $text-input--border-radius;

            transition: opacity $text-input-valid-icon--transition-time ease;
        }
    }

    .text-input {
        $shadow-colors: getShadowColors( map.get( $shadow, 2 ) );

        padding: 0.6rem;
        outline: 1px solid gray;
    
        transition: transform $text-input--transition-time ease,
                    background $text-input--transition-time ease;

        box-shadow: 0 1.5px 2px 1px map.get( $shadow-colors, 2 ),
                    0 1.5px 2px 1.5px map.get( $shadow-colors, 1 );

        &:disabled {
            // TO-DO - change these colors
            outline: 3px solid gray;
            background: lightgray;
        }

        &:not( :disabled ) {
            &:hover {
                outline: 2px solid gray;
            }
        }
    }

    /* SHAPE */
    &.rounded {
        .text-input-label {
            margin-left: $text-input--border-radius;
        }

        .text-input {
            border-radius: $text-input--border-radius;
        }
    }

    /* STATES */
    &.parent-conditional {
        // TO-DO - give some indication of parent conditional
    }

    &.valid {
        .text-input-label {
            .valid-icon {
                color: green;
            }
        }
    }

    &.not-valid {
        .text-input-label {
            .valid-icon {
                color: red;
            }
        }
    }

    &.touched {
        &.valid,
        &.not-valid {
            .text-input-label {
                .valid-icon {
                    opacity: 1;
                }
            }
        }
    }

    &.not-focused {
        .text-input-label {
            .valid-icon {
                opacity: 0;

                transition: opacity $text-input-valid-icon--transition-time ease
                            $text-input--valid-animation-delay;
            }
        }

        &.touched {
            &.not-valid {
                .text-input {
                    &.animate-not-valid {
                        animation: text-input-shake $text-input--transition-time ease-in-out
                                $text-input--valid-animation-delay;
                    }
                }
            }
        }
    }

    &.focused {
        &.valid,
        &.not-valid {
            .text-input-label {
                .valid-icon {
                    opacity: 0;
                }
            }
        }
        
        .text-input-label {
            .text {
                $translate: $text-input--margin-bottom * 2.5;

                transform: translate( $translate, $translate );
            }
        }

        .text-input {
            transform: scaleX( 1.05 );

            &:hover {
                outline: 2px solid map.get( $colors, 'brand-blue', 3 );
            }
        }
    }
}

@keyframes text-input-shake {
    33% {
        transform: skew( 1deg, 1deg );
    }
    66% {
        transform: skew( -1deg, -1deg );
    }
}